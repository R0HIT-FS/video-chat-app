<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      #videos {
        display: grid;
        grid-template-columns: 1fr;
        height: 100vh;
        overflow: hidden;
      }

      .video-player {
        background-color: black;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .smallFrame {
        position: fixed;
        bottom: 100px;
        right: 20px;
        height: 170px;
        width: 300px;
        border-radius: 6px;
        z-index: 10;
      }

      #controls {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 1em;
      }

      .control-container {
        background-color: #6df966;
        padding: 20px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
      }

      .control-container svg {
        height: 30px;
        width: 30px;
      }

      #leave-btn {
        background-color: rgb(255, 80, 80, 1);
      }

      @media screen and (max-width: 600px) {
        .smallFrame {
          height: 80px;
          width: 120px;
        }

        .control-container img {
          height: 20px;
          width: 20px;
        }
      }
    </style>
    <link href="/css/style.css" rel="stylesheet" />
  </head>

  <body class="flex flex-col h-dvh bg-gray-200">
    <%- include('partials/header') %>
    <div class="fixed videoblock hidden z-[222] w-full h-svh">
      <div id="videos">
        <video
          class="video-player"
          id="localVideo"
          autoplay
          muted
          playsinline
        ></video>
        <video
          class="video-player"
          id="remoteVideo"
          autoplay
          playsinline
        ></video>
      </div>
      <div id="controls">
        <div class="control-container" id="cameraButton">
          <svg
            width="21"
            height="14"
            viewBox="0 0 21 14"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
              fill="white"
            />
          </svg>
        </div>

        <div class="control-container" id="hangup">
          <svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ff0000">

            <g id="SVGRepo_bgCarrier" stroke-width="0"/>
            
            <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
            
            <g id="SVGRepo_iconCarrier"> <path d="M8 12.8617H7.25L7.25 12.8617L8 12.8617ZM8 13.4782H8.75L8.75 13.4782L8 13.4782ZM6.57997 15.3295L6.36905 14.6097H6.36905L6.57997 15.3295ZM4.57997 15.9156L4.36905 15.1959H4.36905L4.57997 15.9156ZM2 14.0643L2.75 14.0643L2 14.0643ZM2 12.1414H2.75H2ZM2.44083 10.7889L1.86331 10.3104H1.86331L2.44083 10.7889ZM12 7V7.75V7ZM21.3703 9.85601L21.8699 9.29661V9.29661L21.3703 9.85601ZM16 13.25H15.25H16ZM17.7004 15.1625L17.5916 15.9046L17.7004 15.1625ZM19.7004 15.4556L19.8091 14.7135L19.7004 15.4556ZM22 13.5429H21.25V13.5429L22 13.5429ZM22 11.4183H22.75V11.4183L22 11.4183ZM12 11.3963V10.6463V11.3963ZM7.25 12.8617L7.25 13.4782L8.75 13.4782L8.75 12.8617L7.25 12.8617ZM6.36905 14.6097L4.36905 15.1959L4.7909 16.6353L6.7909 16.0492L6.36905 14.6097ZM2.75 14.0643L2.75 12.1414H1.25L1.25 14.0643L2.75 14.0643ZM3.01834 11.2674C3.90179 10.2012 6.51318 7.75 12 7.75V6.25C5.98964 6.25 2.97874 8.96419 1.86331 10.3104L3.01834 11.2674ZM12 7.75C17.233 7.75 19.8648 9.51708 20.8708 10.4154L21.8699 9.29661C20.5944 8.15756 17.6087 6.25 12 6.25V7.75ZM15.25 12.8617V13.25H16.75V12.8617H15.25ZM17.5916 15.9046L19.5916 16.1977L19.8091 14.7135L17.8091 14.4204L17.5916 15.9046ZM22.75 13.5429V11.4183H21.25V13.5429H22.75ZM16 12.8617C16.75 12.8617 16.75 12.8607 16.75 12.8597C16.75 12.8593 16.75 12.8583 16.75 12.8576C16.75 12.8562 16.75 12.8548 16.75 12.8534C16.7499 12.8505 16.7499 12.8475 16.7498 12.8444C16.7497 12.8382 16.7495 12.8316 16.7492 12.8245C16.7485 12.8104 16.7475 12.7946 16.7459 12.7773C16.7428 12.7426 16.7374 12.7016 16.7283 12.6552C16.7102 12.5622 16.6776 12.4484 16.6202 12.3222C16.503 12.0645 16.2941 11.7811 15.9433 11.524C15.2573 11.0214 14.0694 10.6463 12 10.6463V12.1463C13.9306 12.1463 14.7427 12.5039 15.0567 12.734C15.2059 12.8433 15.247 12.9262 15.2548 12.9433C15.2599 12.9544 15.2586 12.9551 15.256 12.9423C15.2548 12.936 15.2533 12.9264 15.2521 12.9132C15.2515 12.9066 15.251 12.8991 15.2506 12.8905C15.2504 12.8862 15.2503 12.8817 15.2502 12.8769C15.2501 12.8745 15.2501 12.872 15.25 12.8695C15.25 12.8682 15.25 12.867 15.25 12.8657C15.25 12.865 15.25 12.864 15.25 12.8637C15.25 12.8627 15.25 12.8617 16 12.8617ZM12 10.6463C9.93056 10.6463 8.74267 11.0214 8.05672 11.524C7.7059 11.7811 7.49703 12.0645 7.37982 12.3222C7.32239 12.4484 7.2898 12.5622 7.27167 12.6552C7.26263 12.7016 7.25722 12.7426 7.25406 12.7773C7.25248 12.7946 7.25147 12.8104 7.25085 12.8245C7.25054 12.8316 7.25032 12.8382 7.25019 12.8444C7.25012 12.8475 7.25008 12.8505 7.25004 12.8534C7.25003 12.8548 7.25002 12.8562 7.25001 12.8576C7.25001 12.8583 7.25 12.8594 7.25 12.8597C7.25 12.8607 7.25 12.8617 8 12.8617C8.75 12.8617 8.75 12.8627 8.75 12.8637C8.75 12.864 8.74999 12.865 8.74999 12.8657C8.74998 12.867 8.74997 12.8682 8.74996 12.8695C8.74993 12.872 8.74989 12.8745 8.74984 12.8769C8.74973 12.8817 8.74958 12.8862 8.7494 12.8905C8.74902 12.8991 8.74849 12.9066 8.74789 12.9132C8.74669 12.9264 8.74518 12.936 8.74395 12.9423C8.74145 12.9551 8.74011 12.9544 8.74518 12.9433C8.75297 12.9262 8.7941 12.8433 8.94328 12.734C9.25733 12.5039 10.0694 12.1463 12 12.1463V10.6463ZM19.5916 16.1977C21.2257 16.4371 22.75 15.2128 22.75 13.5429L21.25 13.5429C21.25 14.2406 20.5953 14.8287 19.8091 14.7135L19.5916 16.1977ZM20.8708 10.4154C21.1133 10.632 21.25 10.9778 21.25 11.4183L22.75 11.4183C22.75 10.6848 22.5191 9.87638 21.8699 9.29661L20.8708 10.4154ZM2.75 12.1414C2.75 11.7741 2.84345 11.4785 3.01834 11.2674L1.86331 10.3104C1.40595 10.8624 1.25 11.5309 1.25 12.1414H2.75ZM15.25 13.25C15.25 14.5971 16.2642 15.71 17.5916 15.9046L17.8091 14.4204C17.1811 14.3284 16.75 13.8157 16.75 13.25L15.25 13.25ZM4.36905 15.1959C3.5319 15.4412 2.75 14.8281 2.75 14.0643L1.25 14.0643C1.25 15.8966 3.05932 17.1428 4.7909 16.6353L4.36905 15.1959ZM7.25 13.4782C7.25 13.9833 6.90669 14.4522 6.36905 14.6097L6.7909 16.0492C7.93988 15.7125 8.75 14.6777 8.75 13.4782L7.25 13.4782Z" fill="#ff1100"/> </g>
            
            </svg>
        </div>

        <div class="control-container" id="micButton">
          <svg
            width="20"
            height="20"
            viewBox="0 0 14 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
              fill="white"
            />
          </svg>
        </div>
      </div>
    </div>
    <div
      id="incoming-call"
      class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center"
    >
      <div class="bg-white p-8 rounded-md text-center">
        <p class="mb-4">Incoming Call...</p>
        <button
          id="accept-call"
          class="bg-green-500 text-white py-2 px-4 rounded-md"
        >
          Accept
        </button>
        <button
          id="reject-call"
          class="bg-red-500 text-white py-2 px-4 rounded-md ml-2"
        >
          Reject
        </button>
      </div>
    </div>
    <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
      <div
        class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody"
      >
        Nobody has joined yet, please wait.
      </div>
    </main>
    <form id="chatform" class="bg-white p-4 flex">
      <input type="hidden" id="userid" value="" />
      <input
        type="text"
        id="messagebox"
        class="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        placeholder="Type a message"
      />
      <button
        type="submit"
        class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700"
      >
        Send
      </button>
    </form>
    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>

    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>

    <script>
      const socket = io();
      const chatform = document.querySelector("#chatform");
      const messagebox = document.querySelector("#messagebox");
      const messagecontainer = document.querySelector("#message-container");
      let room;
      socket.emit("joinroom");

      socket.on("joined", function (roomname) {
        room = roomname;
        console.log("hey joined");
        document.querySelector(".nobody").classList.add("hidden");
      });

      socket.on("message", function (message) {
        receiveMessage(message);
      });

      chatform.addEventListener("submit", function (e) {
        e.preventDefault();
        socket.emit("message", { room: room, message: messagebox.value });
        attachMessage(messagebox.value);
        messagebox.value = "";
      });

      function attachMessage(message) {
        const userMessageContainer = document.createElement("div");
        userMessageContainer.classList.add("flex", "my-2", "justify-end");

        const userMessageDiv = document.createElement("div");
        userMessageDiv.classList.add(
          "bg-blue-500",
          "text-white",
          "p-3",
          "rounded-lg",
          "max-w-xs"
        );

        const userMessageText = document.createElement("p");
        userMessageText.textContent = message;

        userMessageDiv.appendChild(userMessageText);

        userMessageContainer.appendChild(userMessageDiv);

        document
          .getElementById("message-container")
          .appendChild(userMessageContainer);

        document.querySelector("#message-container").scrollTop =
          document.querySelector("#message-container").scrollHeight;
      }

      function receiveMessage(message) {
        const messageContainer = document.createElement("div");
        messageContainer.classList.add("flex", "my-2", "justify-start");

        const messageDiv = document.createElement("div");
        messageDiv.classList.add(
          "bg-gray-300",
          "text-gray-800",
          "p-3",
          "rounded-lg",
          "max-w-xs"
        );

        const messageText = document.createElement("p");
        messageText.textContent = message;

        messageDiv.appendChild(messageText);

        messageContainer.appendChild(messageDiv);

        document
          .getElementById("message-container")
          .appendChild(messageContainer);
        document.querySelector("#message-container").scrollTop =
          document.querySelector("#message-container").scrollHeight;
      }

      let localStream;
      let remoteStream;
      let peerConnection;
      let inCall = false;

      const rtcSettings = {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      };

      const initialize = async () => {
        socket.on("signalingMessage", handleSignalingMessage);
        try {
          localStream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true,
          });
          document.querySelector("#localVideo").srcObject = localStream;
          document.querySelector("#localVideo").style.display = "block";

          initiateOffer();

          inCall = true;
        } catch (error) {
          console.log("Browser refused to connect", error);
        }
      };

      // initialize();

      const initiateOffer = async () => {
        await createPeerConnection();
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({
              type: "offer",
              offer,
            }),
          });
        } catch (error) {
          console.log("error in creating offer" + error);
        }
      };

      const createPeerConnection = () => {
        peerConnection = new RTCPeerConnection(rtcSettings);

        remoteStream = new MediaStream();

        document.querySelector("#remoteVideo").srcObject = remoteStream;
        document.querySelector("#remoteVideo").style.display = "block";
        document.querySelector("#localVideo").classList.add("smallFrame");

        localStream.getTracks().forEach((track) => {
          peerConnection.addTrack(track, localStream);
        });

        peerConnection.ontrack = (event) => {
          event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack(track);
          });
        };

        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log("Sending Ice Candidates");

            socket.emit("signalingMessage", {
              room,
              message: JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
              }),
            });
          }
        };

        peerConnection.onconnectionstatechange = () => {
          console.log(
            "connection state change hui ",
            peerConnection.connectionState
          );
        };
      };

      const handleSignalingMessage = async (message) => {
        const { type, offer, answer, candidate } = JSON.parse(message);
        if (type === "offer") handleOffer(offer);
        if (type === "answer") handleAnswer(answer);
        if (type === "candidate" && peerConnection) {
          try {
            await peerConnection.addIceCandidate(candidate);
          } catch (error) {
            console.log(error);
          }
        }
        if (type === "hangup") {
          hangup();
        }
      };

      const handleOffer = async (offer) => {
        await createPeerConnection();
        try {
          await peerConnection.setRemoteDescription(offer);
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "answer", answer }),
          });
          inCall = true;
        } catch (error) {
          console.log("failed to handle offer");
        }
      };

      const handleAnswer = async (answer) => {
        try {
          await peerConnection.setRemoteDescription(answer);
        } catch (error) {
          console.log("failed to handle answer");
        }
      };

      document
        .querySelector("#video-call-btn")
        .addEventListener("click", function () {
          socket.emit("startVideoCall", { room });
        });

      socket.on("incomingCall", function () {
        console.log("hey");
        document.querySelector("#incoming-call").classList.remove("hidden");
      });

      socket.on("callAccepted", function () {
        initialize();
        document.querySelector(".videoblock").classList.remove("hidden");
      });

      document
        .querySelector("#accept-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          initialize();
          document.querySelector(".videoblock").classList.remove("hidden");
          socket.emit("acceptCall", { room });
        });

      document
        .querySelector("#reject-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          socket.emit("rejectCall", { room });
        });

      socket.on("callRejected", function () {
        alert("Call rejected by other user");
      });

      document.querySelector("#hangup").addEventListener("click", function () {
        hangup();
      });

      function hangup() {
        if (peerConnection) {
          peerConnection.close();
          peerConnection = null;
          localStream.getTracks().forEach((track) => track.stop());

          document.querySelector(".videoblock").classList.add("hidden");
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "hangup" }),
          });
          inCall = false;
        }
      }

      document.querySelector("#micButton").addEventListener("click", function () {
        const audioTracks = localStream.getAudioTracks();
        const isMicEnabled = audioTracks[0].enabled;

        audioTracks.forEach((track) => {
          track.enabled = !isMicEnabled; // Toggle audio track
        });

        // Change the SVG path fill to red when muted
        const svgPath = document.querySelector("#micButton svg path");
        svgPath.setAttribute("fill", isMicEnabled ? "red" : "white");
      });

      document.querySelector("#cameraButton").addEventListener("click", function () {
        const videoTracks = localStream.getVideoTracks();
        const isVideoEnabled = videoTracks[0].enabled;

        videoTracks.forEach((track) => {
          track.enabled = !isVideoEnabled; // Toggle video track
        });

        // Change the SVG path fill to red when muted
        const svgPath = document.querySelector("#cameraButton svg path");
        svgPath.setAttribute("fill", isVideoEnabled ? "red" : "white");

        // Hide the local video element when the camera is turned off
        document.querySelector("#local-video").classList.toggle("hidden", !isVideoEnabled);
      });
    </script>
  </body>
</html>
